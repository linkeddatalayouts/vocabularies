@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix lidl: <http://www.dfki.org/lidl#> .

@prefix jpeg:	<http://example.com/ns#> .
@prefix img: <http://www.bar.org/2001/XMLSchema#> .
@prefix dcat: <http://www.w3.org/ns/dcat#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix exif: <http://www.w3.org/2003/12/exif/ns> .

Input 1: <katzenbild>
Input 2: img:RGBImage





@prefix hydra: <http://www.w3.org/ns/hydra/core#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

[]
  a hydra:IriTemplate ;
  hydra:mapping [
    a hydra:IriTemplateMapping ;
    hydra:property hydra:freetextQuery ;
    hydra:required true ;
    hydra:variable "binaryFileUri"^^xsd:string
  ] ;
  hydra:template "http://api.example.com/issues{?binaryFileUri}"^^xsd:string ;
  hydra:variableRepresentation hydra:BasicRepresentation .




GET http://lidl.dfki.de/api/maps?mappingUri=<JpegMapping>
=> 
http://lidl.dfki.de/api/maps/JpegMapping


GET http://lidl.dfki.de/api/maps/JpegMapping?file=<katzenbild>
=> 
<http://lidl.dfki.de/api/maps/JpegMapping?file=<katzenbild>
  a foaf:Image ;
  owl:sameAs <katzenbild> ;
  rdfs:isDefinedBy img:RGBImage ;
  exif:width "256"^^xsd:int ;
  exif:height "256"^^xsd:int ;
  img:pixels [
    # auto-generated since defined as distributable
    rdfs:isDefinedBy img:RGBPixelBuffer, 
    a dcat:Distribution ;
    dcat:downloadURL "http://lidl.dfki.de/api/maps/JpegMapping?file=<katzenbild>#pixels"^^xsd:anyURI ;
    dct:format "application/octet-stream" ;
    dcat:byteSize 45 
  ] .

GET http://lidl.dfki.de/api/maps/JpegMapping?file=<katzenbild>#pixels
=> 
BLOB




<JpegMapping>
  rml:logicalSource [
    rml:source ?binaryInputURI ;
    rml:referenceFormulation rr:LiDL;
  ] ;
  rr:subjectMap [ 
    [ rr:constant ?binaryInputURI ] ;
    rr:class foaf:Image 
  ] ;
  rr:predicateObjectMap [ rr:predicate rdf:type ; rr:objectMap [ rr:constant foaf:Image ] ] ;
  rr:predicateObjectMap [ rr:predicate rdfs:isDefinedBy ; rr:objectMap [ rr:constant img:RGBImage  ] ] ;
  rr:predicateObjectMap [ rr:predicate exif:width ; rr:objectMap [ lidl:reference _:width ] ] ;
  rr:predicateObjectMap [ rr:predicate exif:height ; rr:objectMap [ rr:reference _:height ] ;
  rr:predicateObjectMap [ rr:predicate img:pixels ; rr:objectMap [ 
    rr:predicateObjectMap [ rr:predicate rdfs:isDefinedBy ; lidl:objectMap [ rr:constant img:RGBPixelBuffer ] ] ;
    rr:predicateObjectMap [ rr:predicate dcat:downloadURL ; lidl:objectMap [ lidl:reference _:pixels ] ]
  ] .
     
                         
                         
    a lidl:Mapping ;  
    rr:predicateObjectMap [ rr:predicate rdfs:isDefinedBy ; lidl:objectMap [ rr:constant img:RGBPixelBuffer ] ] ;
    rr:predicateObjectMap [ rr:predicate dcat:downloadURL ; lidl:objectMap [ lidl:reference _:pixels ] ] ;
    rr:predicateObjectMap [ rr:predicate dct:format ; rr:objectMap [ rr:constant "application/octet-stream"^^xsd:string ] ];
    rr:predicateObjectMap [ rr:predicate dcat:byteSize ; rr:objectMap [ rr:constant [ lidl:mul ( 3 _:width _:height ) ] ] ];    
  ] .

                         

                         
##################################################
# RGB Image instance
##################################################                     
                         
<katzenbild>
  a foaf:Image ;
  rdfs:isDefinedBy img:RGBImage ;
  exif:width "256"^^xsd:int ;
  exif:height "256"^^xsd:int ;
  img:pixels [
    # auto-generated since defined as distributable
    rdfs:isDefinedBy img:RGBPixelBuffer, 
    a dcat:Distribution ;
    dcat:downloadURL "cuteKitty#pixels"^^xsd:anyURI ;
    dct:format "application/octet-stream" ;
    dcat:byteSize 45 
  ] .
         
                         
                         
##################################################
# RGB Image Mapping
##################################################
                         
<ImageMapping>
  rml:logicalSource [ rml:source <katzenbild> ; rml:referenceFormulation rgb:Image ] .
  rr:subjectMap [ rr:termType rr:IRI ; rr:class foaf:Image ] ;
  rr:predicateObjectMap [ rr:predicate exif:width ; rr:objectMap [ rml:reference rgb:ImageWidth ] ] ;
  rr:predicateObjectMap [ rr:predicate exif:height ; rr:objectMap [ rml:reference rgb:ImageHeight ] ] ;
  rr:predicateObjectMap [ rr:predicate img:pixels ; rr:objectMap [ rml:reference rgb:ImagePixels ] ] .
                         
  
 
<PixelBufferMapping>
  rml:logicalSource [ rml:source <katzenbild> ; rml:referenceFormulation rgb:PixelBuffer ] .
  rr:subjectMap [ rr:termType rr:BlankNode ] ;
  rr:predicateObjectMap [ rr:predicate dcat:byteSize ; rr:objectMap [ rr:constant [ lidl:mul ( 3 _:width _:height ) ] ] ] .    
                       
  rr:predicateObjectMap [ rr:predicate img:hasPixel ; rr:objectMap [ rml:reference rgb:PixelAttribute ] ] .


##################################################
# RGB Image Layout
##################################################

rgb:Image
  lidl:endianess lidl:LittleEndian ;
  lidl:attribute rgb:ImageWidth , rgb:ImageHeight , rgb:ImagePixels . 
  
rgb:ImageWidth
  lidl:order 0;
  lidl:count 1 ;
  lidl:layout lidl:Int32 .
    
rgb:ImageHeight
  lidl:order 1;
  lidl:count 1 ;
  lidl:layout lidl:Int32 . 

rgb:ImagePixels
  lidl:order 2 ;
  lidl:count 1 ;
  lidl:layout rgb:PixelBuffer .


##################################################
# RGB Pixel Buffer Layout
##################################################

rgb:PixelBuffer
  lidl:attribute [
      lidl:order 0 ;
      lidl:count [ lidl:mul ( _:width _:height ) ] ;
      lidl:layout rgb:Pixel 
  ] .


##################################################
# RGB Pixel Layout
##################################################

rgb:Pixel
  lidl:attribute [
    lidl:order 0;
    lidl:count 3 ;
    lidl:layout lidl:UInt8  
  ] .


                         
                         
                         
                
                         
                         
                         
                         
                         











Input 1: <katzenbild>
Input 2: jpeg:Image

Output: 
<katzenbild>
  a foaf:Image ;
  rdfs:isDefinedBy jpeg:Image ;
  exif:width "256"^^xsd:int ;
  exif:height "256"^^xsd:int .



<JpegMapping>
  a lidl:Mapping ;
  rr:subjectMap [  ] ;
  rr:predicateObjectMap [ rr:predicate exif:width ; rr:object _:image_width ] ;
  rr:predicateObjectMap [ rr:predicate exif:height ; lidl:object _:image_height ] ;
  rr:predicateObjectMap [ rr:predicate rdfs:isDefinedBy ; lidl:object jpeg:Image  ] ;
  rr:predicateObjectMap [ rr:predicate rdf:type ; lidl:object foaf:Image ] .
 


jpeg:Image 
  a lidl:Composite ;
  lidl:attribute [ lidl:order 0 ; lidl:layout _:bla , jpeg:Segment ] . 

jpeg:Segment
  lidl:attribute
    [ lidl:predicate jpeg:ff ; lidl:order 0 ;  lidl:elementCount 1 ; lidl:layout lidl:Byte ; lidl:constant "FF"^^xsd:hexBinary ] , 
    [ lidl:predicate jpeg:marker ; lidl:order 1 ;  lidl:elementCount 1 ; lidl:layout lidl:Byte ] , 
    [ lidl:predicate jpeg:segmentLength ; lidl:order 2 ;  lidl:elementCount 1 ; lidl:layout lidl:UInt16 ] .
    
_:bla 
  a jpeg:Segment ;
  lidl:attribute 
    [ lidl:predicate jpeg:marker ; lidl:order 1 ;  lidl:elementCount 1 ; lidl:layout lidl:Byte ; lidl:constant "c0"^^xsd:hexBinary ] ,
    [ lidl:predicate jpeg:data ; lidl:order 3 ;  lidl:elementCount 1 ; lidl:layout jpeg:SegmentSof0 ] .   

  
jpeg:SegmentSof0
  lidl:attribute _:image_height , _:image_width .

_:image_height
  lidl:order 1 ;
  lidl:elementCount 1 ;
  lidl:layout  lidl:Int32 .
  
_:image_width
  lidl:predicate exif:width ;
  lidl:order 2 ;
  lidl:elementCount 1 ;
  lidl:layout lidl:Int32 . 
  
  

                         
                         


